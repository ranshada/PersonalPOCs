# Indian Railway Train Coach System class TrainCoach: def __init__(self, coach_name): self.coach_name = coach_name self.passengers = [] # List of passengers self.capacity = 72 # Standard sleeper coach capacity def add_passenger(self, passenger_name, seat_number=None): if len(self.passengers) >= self.capacity: print(f"Coach {self.coach_name} is full! Waitlisted.") return False passenger_info = { "name": passenger_name, "seat": seat_number or len(self.passengers) + 1, "status": "Confirmed" } self.passengers.append(passenger_info) print(f"{passenger_name} booked seat {passenger_info['seat']} in {self.coach_name}") return True def find_passenger(self, name): for i, passenger in enumerate(self.passengers): if passenger["name"].lower() == name.lower(): return f"Found {name} at seat {passenger['seat']}, index {i}" return f"{name} not found in this coach" def get_passengers_by_range(self, start_seat, end_seat): result = [] for passenger in self.passengers: if start_seat <= passenger["seat"] <= end_seat: result.append(passenger) return result def display_coach_status(self): print(f"\nðŸš‚ Coach {self.coach_name} Status:") print(f"Occupied: {len(self.passengers)}/{self.capacity}") for passenger in self.passengers[:5]: # Show first 5 print(f" Seat {passenger['seat']}: {passenger['name']}") if len(self.passengers) > 5: print(f" ... and {len(self.passengers) - 5} more passengers") # Usage Example s1_coach = TrainCoach("S1") s1_coach.add_passenger("Rajesh Kumar") s1_coach.add_passenger("Priya Sharma") s1_coach.add_passenger("Vikram Singh") print(s1_coach.find_passenger("Priya Sharma")) s1_coach.display_coach_status() # List Operations - IPL Team Management ipl_teams = ["CSK", "MI", "RCB", "DC", "KKR", "PBKS", "RR", "SRH"] # Direct access (like knowing team's position in table) print(f"3rd team: {ipl_teams[2]}") # RCB # Adding new franchise (theoretical) ipl_teams.append("NEW_TEAM") # Finding team position if "CSK" in ipl_teams: position = ipl_teams.index("CSK") + 1 print(f"CSK is at position {position}") # Slicing - getting top 4 teams top_4 = ipl_teams[:4] print(f"Top 4 teams: {top_4}") # List comprehension - teams starting with specific letter teams_starting_with_r = [team for team in ipl_teams if team.startswith('R')] print(f"Teams starting with R: {teams_starting_with_r}")